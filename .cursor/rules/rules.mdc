---
description: rules for easy rooms
globs: 
alwaysApply: true
---
# EasyRooms Full-Stack Room Finder Web Application Reconstruction Project

## Project Overview
Recreate a modern, full-stack room finding and booking platform with cutting-edge technologies and AI-driven features.

## Technical Stack (Recommended)
- Frontend Next.js 14+ (App Router)
- Backend Prisma ORM, tRPC or GraphQL
- Authentication NextAuth.js or Clerk
- State Management React Server Components
- Styling Tailwind CSS, ShadcnUI
- Deployment Vercel or Netlify

## Core Features to Implement
1. User Authentication System
   - Secure registration and login
   - Role-based access control (Tenant, Landlord, Admin)
   - Social media authentication integration

2. Room Listing Functionality
   - Advanced search with multiple filters
     - Location
     - Price range
     - Room type
     - Amenities
   - Geolocation-based search
   - Interactive map integration

3. User Dashboards
   - Tenant Dashboard
     - Saved listings
     - Application history
     - Messaging system
   - Landlord Dashboard
     - List and manage properties
     - Application tracking
     - Earnings overview

4. AI-Powered Features
   - Intelligent room recommendation system
   - Natural language search capabilities
   - Automated listing quality scoring
   - Predictive pricing suggestions

5. Advanced Search and Filtering
   - Machine learning-enhanced search relevance
   - Real-time filtering
   - Comprehensive search parameters
   - Price prediction algorithm

6. Geospatial Capabilities
   - Google Maps integration
   - Radius-based search
   - Neighborhood information
   - Safety score calculation

7. Security and Performance
   - Implement robust authentication
   - Rate limiting
   - Caching strategies
   - Error handling and logging
   - Responsive design

## Technical Requirements
- Fully typed with TypeScript
- Server-side rendering
- Optimized performance
- Accessibility compliance
- Mobile-first design
- Internationalization support

## AI Integration Points
1. Recommendation Engine
   - Analyze user preferences
   - Match rooms based on historical data
   - Predict user's ideal living space

2. Listing Quality Assessment
   - Automatically score listings
   - Detect potential fraudulent posts
   - Suggest improvements for listings

3. Conversational Search Interface
   - Natural language processing
   - Intent-based search
   - Contextual understanding

## Stretch Goals
- Real-time notification system
- Virtual room tour integration
- Blockchain-based secure transactions
- Advanced analytics dashboard

## Development Methodology
- Modular architecture
- Microservices approach
- Continuous integration
- Comprehensive testing
- Documentation-driven development

## Performance Metrics
- Lighthouse Score 90+ across all categories
- First Contentful Paint  1.8s
- Time to Interactive  2.5s
- Total Blocking Time  200ms

## Deployment Considerations
- Containerization with Docker
- CICD pipeline
- Scalable cloud infrastructure
- Monitoring and error tracking

## Compliance and Ethics
- GDPR compliance
- Data privacy protection
- Transparent AI decision-making
- Bias mitigation in recommendation systems

## Recommended AI Tools
- OpenAI GPT for natural language processing
- Hugging Face for machine learning models
- TensorFlow for recommendation algorithms

## Estimated Development Timeline
- Planning and Architecture 1-2 weeks
- Core Feature Implementation 4-6 weeks
- AI Feature Development 2-3 weeks
- Testing and Optimization 2-3 weeks
- Deployment and Initial Monitoring 1 week

## Success Criteria
- User engagement rate
- Search accuracy
- Listing conversion rate
- User satisfaction score